package s4.B193349;

import s4.specification.*;
import java.lang.System;

/*package s4.specification;

public interface FrequencerInterface {     // This interface provides the design for frequency counter.
    void setTarget(byte  target[]); // set the data to search.
    void setSpace(byte  space[]);  // set the data to be searched target from.
    int frequency(); //It return -1, when TARGET is not set or TARGET's length is zero
                    //Otherwise, it return 0, when SPACE is not set or SPACE's length is zero
                    //Otherwise, get the frequency of TAGET in SPACE
    int subByteFrequency(int start, int end);
    // get the frequency of subByte of taget, i.e target[start], taget[start+1], ... , target[end-1].
    // For the incorrect value of START or END, the behavior is undefined.
}
*/

public class Frequencer implements FrequencerInterface {
	// Code to start with: This code is not working, but good start point to work.
	byte[] myTarget;
	byte[] mySpace;
	boolean targetReady = false;
	boolean spaceReady = false;

	int[] suffixArray;
	int[] bin = new int[256];
	byte[] status;

	// The variable, "suffixArray" is the sorted array of all suffixes of mySpace.
	// Each suffix is expressed by a integer, which is the starting position in
	// mySpace.
	// The following is the code to print the variable
	private void printSuffixArray() {
		if (spaceReady) {
			for (int i = 0; i < mySpace.length; i++) {
				int s = suffixArray[i];
				for (int j = s; j < mySpace.length; j++) {
					System.out.write(mySpace[j]);
				}
				System.out.write('\n');
			}
		}
	}

	private void printStatus() {
		String str = "";
		try {
			str = new String(status, "UTF-8");
		} catch (Exception e) {
			System.out.println(e);
		}

		System.out.println(str);
	}

	private void printSpace() {
		String str = "";
		try {
			str = new String(mySpace, "UTF-8");
		} catch (Exception e) {
			System.out.println(e);
		}

		System.out.println(str);
	}

	private void setStatus() {
		if (!spaceReady)
			return;
		status[mySpace.length - 1] = 'S';
		for (int i = mySpace.length - 2; i >= 0; i--) {
			if (mySpace[i] < mySpace[i + 1])
				status[i] = 'S';
			else if (mySpace[i] > mySpace[i + 1])
				status[i] = 'L';
			else
				status[i] = status[i + 1];
		}

	}

	private void setBin() {
		int sum = 0;
		for (int i = 0; i < mySpace.length; i++) {
			bin[mySpace[i]] += 1;
		}
		for (int i = 0; i < bin.length; i++) {
			sum += bin[i];
			bin[i] = sum;
		}
	}

	private void inducedSort() {
		int[] count = new int[257];
		for (int i = 0; i < status.length - 1; i++) {
			if (status[i] == 'L' && status[i + 1] == 'S') {
				byte ch = mySpace[i];
				count[ch]++;
				suffixArray[bin[ch + 1] - count[ch] - 1] = i + 1;
			}
		}
		count = new int[257];
		for (int i = 0; i < suffixArray.length; i++) {
			if (suffixArray[i] == 0)
				continue;
			int bi = suffixArray[i] - 1;
			if (status[bi] == 'L') {
				byte ch = mySpace[bi];
				System.out.println(ch);
				suffixArray[bin[ch] + count[ch]] = bi;
				count[ch]++;

			}
		}
		count = new int[257];
		for (int i = suffixArray.length - 1; i > 0; i--) {
			if (suffixArray[i] == 0)
				continue;
			int bi = suffixArray[i] - 1;
			if (status[bi] == 'S') {
				byte ch = mySpace[bi];
				count[ch]++;
				suffixArray[bin[ch] - count[ch]] = bi;
			}
		}
	}

	public void setSpace(byte[] space) {
		if (space.length < 0) {
			return;
		}
		spaceReady = true;
		mySpace = new byte[space.length + 1];
		for (int i = 0; i < space.length; i++) {
			mySpace[i] = space[i];
		}
		mySpace[space.length] = 0;
		suffixArray = new int[mySpace.length];
		status = new byte[mySpace.length];
		setStatus();
		setBin();
		inducedSort();
	}

	// private int subByteStartIndex(int start, int end) {
	// // It returns the index of the first suffix which is equal or greater than
	// subBytes;
	// // not implemented yet;
	// // If myTaget is "Hi Ho", start=0, end=2 means "Hi".
	// // For "Ho", it will return 5 for "Hi Ho Hi Ho".
	// // 5 means suffix_5,
	// // Please note suffix_5 is "Ho" and "Ho" starts from here.
	// // For "Ho ", it will return 6 for "Hi Ho Hi Ho".
	// // 6 means suffix_6,
	// // Please note suffix_6 is "Ho Hi Ho", and "Ho " starts from here.
	// for (int i=0;i<mySpace.length;i++) {
	// if(targetCompare(suffixArray[i],start,end)==0) { return i; }
	// }
	// return suffixArray.length; // This line should be modified.
	// }

	// private int subByteEndIndex(int start, int end) {
	// // It returns the next index of the first suffix which is greater than
	// subBytes;
	// // not implemented yet
	// // If myTaget is "Hi Ho", start=0, end=2 means "Hi".
	// // For "Ho", it will return 7 for "Hi Ho Hi Ho".
	// // For "Ho ", it will return 7 for "Hi Ho Hi Ho".
	// // 7 means suffix_7,
	// // Please note suffix_7 is "i Ho Hi", which does not start with "Ho" nor "Ho
	// ".
	// // Whereas suffix_5 is "Ho Hi Ho", which starts "Ho" and "Ho ".
	// //
	// for (int i=subByteStartIndex(start,end);i<mySpace.length;i++) {
	// if(targetCompare(suffixArray[i],start,end)!=0) { return i; }
	// }
	// return suffixArray.length; // This line should be modified.
	// }

	public int subByteFrequency(int start, int end) {
		// /* This method be work as follows, but
		// int spaceLength = mySpace.length;
		// int count = 0;
		// for(int offset = 0; offset< spaceLength - (end - start); offset++) {
		// boolean abort = false;
		// for(int i = 0; i< (end - start); i++) {
		// if(myTarget[start+i] != mySpace[offset+i]) { abort = true; break; }
		// }
		// if(abort == false) { count++; }
		// }
		// */
		// int first = subByteStartIndex(start, end);
		// int last1 = subByteEndIndex(start, end);
		// return last1 - first;
		return 0;
	}

	public void setTarget(byte[] target) {
		myTarget = target;
		if (myTarget.length > 0)
			targetReady = true;
	}

	public int frequency() {
		// if(targetReady == false) return -1;
		// if(spaceReady == false) return 0;
		// return subByteFrequency(0, myTarget.length);
		return 0;
	}

	public static void main(String[] args) {
		Frequencer frequencerObject;
		// try {
		frequencerObject = new Frequencer();
		frequencerObject.setSpace("mmiissiissiippii".getBytes());
		frequencerObject.printSpace();
		frequencerObject.printStatus();
		frequencerObject.printSuffixArray(); // you may use this line for DEBUG
		/*
		 * Example from "Hi Ho Hi Ho" 0: Hi Ho 1: Ho 2: Ho Hi Ho 3:Hi Ho 4:Hi Ho Hi Ho
		 * 5:Ho 6:Ho Hi Ho 7:i Ho 8:i Ho Hi Ho 9:o A:o Hi Ho
		 */

		// frequencerObject.setTarget("H".getBytes());
		// //
		// // **** Please write code to check subByteStartIndex, and subByteEndIndex
		// //

		// System.out.println("start = "+ frequencerObject.subByteStartIndex(0,1));
		// System.out.println("end = "+ frequencerObject.subByteEndIndex(0,1));

		// int result = frequencerObject.frequency();
		// System.out.print("Freq = "+ result+" ");
		// if(4 == result) { System.out.println("OK"); } else
		// {System.out.println("WRONG"); }

		// } catch (Exception e) {
		// System.out.println("STOP");
		// }
	}
}
